{
	"info": {
		"_postman_id": "30b42910-34d5-4766-8a32-732b7c6be005",
		"name": "libraryAppTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24778089"
	},
	"item": [
		{
			"name": "addBook Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check is POST was succesful\", function () {\r",
							"    pm.response.to.have.status(201 || 202);\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"pm.test(\"Response says that book was added\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"added_book_id\");\r",
							"    pm.environment.set(\"testBookId\", jsonData.added_book_id);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}?type=book&title=testingTitle&category=testingCategory",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "book"
						},
						{
							"key": "title",
							"value": "testingTitle"
						},
						{
							"key": "category",
							"value": "testingCategory"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBookById Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response is an object\",function(){\r",
							"   pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"testBookId\"));\r",
							"    pm.expect(jsonData.title).to.eql(\"testingTitle\");\r",
							"    pm.expect(jsonData.category).to.eql(\"testingCategory\");\r",
							"    pm.expect(jsonData.status).to.eql(\"available\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?type=book&id={{testBookId}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "book"
						},
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBookByTitle Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response is an array\",function(){\r",
							"   pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"pm.test(\"Response should return 1 or more items\", function () {\r",
							"    pm.expect(jsonData.length).to.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?type=book&title=testingTitle",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "book"
						},
						{
							"key": "title",
							"value": "testingTitle"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBookByCategory Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response is an array\",function(){\r",
							"   pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"pm.test(\"Response should return 1 or more items\", function () {\r",
							"    pm.expect(jsonData.length).to.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?type=book&category=testingCategory",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "book"
						},
						{
							"key": "category",
							"value": "testingCategory"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "addPerson Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check is POST was succesful\", function () {\r",
							"    pm.response.to.have.status(201 || 202);\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"pm.test(\"Test if person was added\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"added_person_id\");\r",
							"    pm.environment.set(\"testPersonId\", jsonData.added_person_id);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}?type=person&name=testingName&secondName=testingSecondName&lastName=testingLastName&email=testing@mail.com",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "person"
						},
						{
							"key": "name",
							"value": "testingName"
						},
						{
							"key": "secondName",
							"value": "testingSecondName"
						},
						{
							"key": "lastName",
							"value": "testingLastName"
						},
						{
							"key": "email",
							"value": "testing@mail.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getPersonByName Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response is an array\",function(){\r",
							"   pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"pm.test(\"Response should return 1 or more items\", function () {\r",
							"    pm.expect(jsonData.length).to.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?type=person&name=testingName",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "person"
						},
						{
							"key": "name",
							"value": "testingName"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllPeople Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response is an array\",function(){\r",
							"   pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"pm.test(\"Response should return 1 or more items\", function () {\r",
							"    pm.expect(jsonData.length).to.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?type=person",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "person"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "rentBook Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"pm.test(\"Test if person was added\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"updated_book_id\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{url}}?id={{testBookId}}&personId={{testPersonId}}&status=rented",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						},
						{
							"key": "personId",
							"value": "{{testPersonId}}"
						},
						{
							"key": "status",
							"value": "rented"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "failDelete Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"pm.test(\"Test if delete failed\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Book is currently rented\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}?type=book&id={{testBookId}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "book"
						},
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "returnBook Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"pm.test(\"Test if person was added\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"updated_book_id\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{url}}?id={{testBookId}}&status=available",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						},
						{
							"key": "status",
							"value": "available"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBookHistory Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response is an array\",function(){\r",
							"   pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"pm.test(\"Response should return 1 or more items\", function () {\r",
							"    pm.expect(jsonData.length).to.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?type=history&bookId={{testBookId}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "history"
						},
						{
							"key": "bookId",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getPersonRentHistory Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Response is an object\",function(){\r",
							"   pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Response should return 1 or more items\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"    pm.expect(jsonData).to.have.property(\"history\");\r",
							"    pm.expect(jsonData.history).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?type=history&personId={{testPersonId}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "history"
						},
						{
							"key": "personId",
							"value": "{{testPersonId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "deletePerson Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"pm.test(\"Test if person was deleted\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.deleted_person_id).to.eql(pm.environment.get(\"testPersonId\"));\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}?type=person&id={{testPersonId}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "person"
						},
						{
							"key": "id",
							"value": "{{testPersonId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteBook Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"pm.test(\"Response has json body\",function(){\r",
							"   pm.response.to.have.jsonBody();\r",
							"});\r",
							"pm.test(\"Test if book was deleted\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.deleted_book_id).to.eql(pm.environment.get(\"testBookId\"));\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}?type=book&id={{testBookId}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "type",
							"value": "book"
						},
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "email openid",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "6v5kijec30r2raduv8itusg21o",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://library-app-project.auth.eu-central-1.amazoncognito.com/login?client_id=6v5kijec30r2raduv8itusg21o&response_type=token&scope=email+openid&redirect_uri=https://oauth.pstmn.io/v1/browser-callback",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "implicit",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "AWS",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://oe98md1k2l.execute-api.eu-central-1.amazonaws.com/Prod/book",
			"type": "string"
		}
	]
}