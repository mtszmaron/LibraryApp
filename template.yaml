AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  LibraryApplication

  Sample SAM Template for LibraryApplication

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
  Api:
    Auth:
      Authorizers:
        CognitoAuth:
          AuthorizationScopes:
            - email
          UserPoolArn: !GetAtt AuthUserPool.Arn

Parameters:
  BookingQueueName:
    Type: String
    Description: Booking Queue
    Default: BookingQueue
  BookingDLQName:
    Type: String
    Description: Booking Queue Dead Letter
    Default: BookingDLQ

Resources:
  LibraryAppFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: LibraryAppFunction #HelloWorldFunction
      Handler: LibraryAppHandler::handleRequest #helloworld.App::handleRequest
      Runtime: java8
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
#          INVOCATION_QUEUE_URL: !Ref MyFifoQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LibraryAppDynamoDb
#        - SQSPollerPolicy:
#            QueueName: !GetAtt MyFifoQueue.QueueName
      Events:
        GetBook:
          Type: Api
          Properties:
            Path: /libraryApp
            Method: get
            Auth:
              Authorizer: CognitoAuth
        AddBook:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /libraryApp #/hello
            Method: post
            Auth:
              Authorizer: CognitoAuth
        DeleteBook:
          Type: Api
          Properties:
            Path: /libraryApp
            Method: delete
            Auth:
              Authorizer: CognitoAuth
        UpdateBook:
          Type: Api
          Properties:
            Path: /libraryApp
            Method: put
            Auth:
              Authorizer: CognitoAuth

  BookingQueueFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: LibraryQueueFunction
      Handler: BookingQueueHandler
      Runtime: java8
      MemorySize: 512
      Role: !GetAtt BookingQueueFunctionRole.Arn
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
      Events:
        Batch:
          Type: SQS
          Properties:
            Queue: !GetAtt LibraryBookingQueue.Arn
            FunctionResponseTypes:
              - ReportBatchItemFailures

  LibraryAppDynamoDb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LibraryTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "type"
          AttributeType: "S"
        - AttributeName: "category"
          AttributeType: "S"
        - AttributeName: "bookId"
          AttributeType: "S"
        - AttributeName: "title"
          AttributeType: "S"
        - AttributeName: "rentedBy"
          AttributeType: "S"
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "type"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: categoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: bookIdIndex
          KeySchema:
            - AttributeName: bookId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: typeIndex
          KeySchema:
            - AttributeName: type
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: titleIndex
          KeySchema:
            - AttributeName: title
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: rentedByIndex
          KeySchema:
            - AttributeName: rentedBy
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: nameIndex
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AuthUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: LibraryAuthPool
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      UsernameConfiguration:
        CaseSensitive: true
      AliasAttributes:
        - email
        - preferred_username
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
        - AttributeDataType: String
          Mutable: true
          Name: preferred_username
          Required: false

  AuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AuthUserPool
      ClientName: my-website
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
      EnableTokenRevocation: true
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: 12
      IdTokenValidity: 12
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://example.com

#  DefaultUser:
#    Type: AWS::Cognito::UserPoolUser
#    Properties:
#      MessageAction: SUPPRESS
#      UserAttributes:
#        - Name: email
#          Value: "abc@gmail.com"
#        - Name: preferred_username
#          Value: basic_user2
#      Username: admin_user
#      UserPoolId: !Ref AuthUserPool

  AuthUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref AuthUserPool
      Domain: "library-app-project"

  LibraryBookingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref BookingQueueName
      VisibilityTimeout: 60
      RedrivePolicy:
        maxReceiveCount: 3
        deadLetterTargetArn: !GetAtt LibraryBookingDLQ.Arn

  LibraryBookingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref BookingDLQName

  LibraryBookingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref LibraryBookingQueue
      PolicyDocument:
        Statement:
          - Sid: Send_Permission
            Action:
              - "SQS:SendMessage"
              - "SQS:ReceiveMessage"
              - "SQS:DeleteMessage"
              - "SQS:GetQueueUrl"
              - "SQS:GetQueueAttributes"
              - "SQS:ChangeMessageVisibility"
            Effect: "Allow"
            Principal:
              AWS: "*" #arn:aws:iam::006912726820:root"
            Resource: !GetAtt LibraryBookingQueue.Arn

  BookingQueueFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*

#  BookingQueueESM:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      BatchSize: 10
#      MaximumBatchingWindowInSeconds: 5
#      Enabled: false
#      EventSourceArn: !GetAtt LibraryBookingQueue.Arn
#      FunctionName: !GetAtt BookingQueueFunction.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  LibraryAppFunctionApi:
    Description: "API Gateway endpoint Library App Function" #"API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/libraryApp/" #!Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  LibraryAppFunction:
    Description: "Library App Lambda Function ARN" #"Hello World Lambda Function ARN"
    Value: !GetAtt LibraryAppFunction.Arn
  LibraryAppFunctionIamRole:
    Description: "Implicit IAN Role Library App function" #"Implicit IAM Role created for Hello World function"
    Value: !GetAtt LibraryAppFunctionRole.Arn
  BookingQueueFunctionApi:
    Description: "API Gateway endpoint Library App Function" #"API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/bookingQueue/"
  BookingQueueFunction:
    Description: "Library App Lambda Function ARN" #"Hello World Lambda Function ARN"
    Value: !GetAtt BookingQueueFunction.Arn
  BookingQueueFunctionIamRole:
    Description: "Implicit IAN Role Library App function" #"Implicit IAM Role created for Hello World function"
    Value: !GetAtt BookingQueueFunction.Arn